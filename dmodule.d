/*
Copyright (c) 2011-2014 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dmodule;

import std.stdio;
import std.file;
import std.ascii;
import std.conv;
import std.array;
import std.path;
import std.datetime;

import lexer;

struct Pattern
{
    string[] symbols;
    uint position;

    bool satisfies(string token)
    {
        if (symbols[position] == "*")
        {
            if (isIdentifier(token))
            {
                position++;
                if (position == symbols.length)
                    position = 0;
                return true;
            }
            else
            {
                position = 0;
                return false;
            }
        }
        else if (symbols[position] == "*,")
        {
            if (isIdentifier(token))
            {
                return true;
            }
            else if (token == ",")
            {
                return true;
            }
            else
            {
                position++;
                if (position == symbols.length)
                {
                    position = 0;
                    return false;
                }
                else
                {
                    return satisfies(token);
                }
            }
        }
        else
        {
            const string sym = symbols[position];
            if (token == sym)
            {
                position++;
                if (position == symbols.length)
                    position = 0;
                return true;
            }
            else
            {
                position = 0;
                return false;
            }
        }
    }

    string toString()
    {
        return symbols.to!string;
    }
}

struct FilterLevel
{
    Pattern[] patterns;
    bool positive = true;

    void addPattern(string[] symbols)
    {
        patterns ~= Pattern(symbols, 0);
    }

    bool satisfies(string token)
    {
        bool res = false;
        foreach(ref p; patterns)
            if (positive)
                res = res | p.satisfies(token);
            else
                res = res | (!p.satisfies(token));
        return res;
    }
}

class Filter
{
    Lexer lex;
    FilterLevel[] levels;
    string current;

    this(string text)
    {
        lex = new Lexer(text);
        lex.addDelimiters();
    }

    FilterLevel* addLevel(bool positive = true)
    {
        FilterLevel flevel;
        flevel.positive = positive;
        levels ~= flevel;
        return &levels[$-1];
    }

    string getNext()
    {
        do
        {
            lex.readNext();
            string token = lex.current;
            if (token == "")
                return token;
            else 
            {
                bool res = false;
                foreach(ref level; levels)
                {
                    if (!level.satisfies(token))
                    {
                        res = false;
                        break;
                    }
                    else
                        res = true;
                }
                if (res)
                    return token;
            }
        }
        while(true);
    }

    void readNext()
    {
        current = getNext();
    }
}

bool isIdentifier(string s)
{
    return (s.length && (isAlpha(s[0]) || s[0] == '_'));
}

string moduleToPath(string modulename, string ext)
{
    string fname = modulename;
    fname = replace(fname, ".", "/");
    fname = fname ~ ext;
    return fname;	
}

string pathToModule(string path)
{
    string mdl = path;
    mdl = replace(mdl, "/", ".");
    return mdl;	
}

final class DModule
{
    private:

    Filter filter;
    string[string] imports;

    public:

    string filename;
    string ext;
    string packageName;
    SysTime lastModified;
    DModule[string] backdeps;
    int[string] versionIds;
    int[string] debugIds;
    bool forceRebuild = false;
    bool globalFile = false;

    // TODO: simple debug condition

    this(string filename, string ext)
    {
        this.filename = filename;
        this.ext = ext;

        auto text = readText(filename);
        filter = new Filter(text);
        auto l1 = filter.addLevel();
        l1.addPattern(["{"]);
        l1.addPattern(["}"]);
        l1.addPattern([";"]);
        l1.addPattern(["else"]);
        l1.addPattern(["version", "(", "*", ")"]);
        l1.addPattern(["version", "=", "*"]);
        l1.addPattern(["debug", "(", "*", ")"]);
        l1.addPattern(["debug", "=", "*"]);
        l1.addPattern(["import", "*,", ";"]);
        l1.addPattern(["import", "*", ":"]);
        l1.addPattern(["import", "*", "=", "*"]);
    }

    override string toString() 
    {
        string output = lastModified.toISOExtString() ~ " " ~ to!string(cast(int)globalFile) ~ " ";
        foreach(i,v; imports) 
            output ~= v ~ " ";
        return output;
    }

    string[] importedModules()
    {
        return imports.keys;
    }

    string[] importedFiles()
    {
        return imports.values;
    }

    void addImportFile(string filename)
    {
        imports[pathToModule(stripExtension(filename))] = filename;
    }

    void addImport(string moduleName)
    {
        imports[moduleName] = moduleToPath(moduleName, ext);
    }

    bool buildDependencyList()
    {
        try
        {
            parseImports();
        }
        catch(Exception)
        {
            writefln("%s: syntax error", filename);
            return false;
        }
        return true;
    }

    private:

    void parseImports()
    {
        string token = "";
        do 
        {
            filter.readNext();
            token = filter.current;
            if (token.length)
            {
                parseStatement(false);
            }
        }
        while (token.length > 0);
    }

    void parseStatement(bool skip)
    {
        if (filter.current == "version" || filter.current == "debug")
        {
            if (!skip)
                parseVersionStatement();
        }
        else if (filter.current == "import")
        {
            if (!skip)
                parseImportStatement();
        }
    }

    void parseVersionStatement()
    {
        const string stat = filter.current;
        filter.readNext(); // pop version/debug

        if (filter.current == "(")
        {
            filter.readNext(); // pop (
            const string id = filter.current;

            filter.readNext(); // pop id
            if (filter.current != ")")
                throw new Exception("Syntax error");
            filter.readNext(); // pop )
            bool skip;

            if (stat == "version")
                skip = (id in versionIds) is null;
            else if (stat == "debug")
                skip = (id in debugIds) is null;

            parseBlock(skip);

            if (filter.current == "else")
            {
                parseBlock(!skip);
            }
        }
        else if (filter.current == "=")
        {
            filter.readNext(); // pop =
            string id = filter.current;

            if (stat == "version")
                versionIds[id] = 1;
            else if (stat == "debug")
                debugIds[id] = 1;
        }
    }

    void parseImportStatement()
    {
        filter.readNext(); // pop import
        string impName = filter.current;
        filter.readNext(); // pop impName

        // End of import list
        if (filter.current == ";" || filter.current == ":")
        {
            addImport(impName);
            return;
        }
        // Import list
        else if (filter.current == ",")
        {
            addImport(impName);
            parseImportStatement();
        }
        // Renamed import
        else if (filter.current == "=")
        {
            filter.readNext(); // pop =
            addImport(filter.current);
        }
    }

    void parseBlock(bool skip)
    {
        if (filter.current == "{")
        {
            while(filter.current != "}")
            {
                filter.readNext();
                parseStatement(skip);
                if (filter.current == "")
                    throw new Exception("Syntax error");
            }
            filter.readNext(); // pop }
        }
        else
        {
            parseStatement(skip);
        }
    }
}

